{# tickets.twig #}
{% extends "layout/base.twig" %}

{% block head %}
	{# Hide page until auth is verified #}
	<style>
		html {
			visibility: hidden;
			opacity: 0;
		}
		html.auth-verified {
			visibility: visible;
			opacity: 1;
		}
	</style>

	{# Check auth IMMEDIATELY before anything renders #}
	<script>
		(function () { // Check for auth token in localStorage
const authToken = localStorage.getItem('ticketapp_session');

if (! authToken) { // No auth token - redirect immediately
const basePath = '{{ base_path }}';
window.location.replace(basePath + '/auth/login');
} else { // Auth token exists - show the page
document.documentElement.classList.add('auth-verified');
}
})();
	</script>
{% endblock %}


{% block content %}

{% include 'components/dashboard/header.twig' %}

<main class="p-8 px-12 pt-24 max-w-[1440px] mx-auto">
	<h1 class="text-3xl font-bold mb-4" id="pageTitle">
		All Tickets
	</h1>

	<!-- Filter tabs -->
	<div class="flex gap-4 mb-6">
		<button id="allTicketsTab" class="px-4 py-2 rounded-lg transition-colors bg-primary text-white">
			All Tickets
		</button>
		<button id="activeTicketsTab" class="px-4 py-2 rounded-lg transition-colors bg-gray-200 text-gray-700 hover:bg-gray-300">
			Active Tickets
		</button>
	</div>

	<div class="space-y-3" id="ticketsContainer">
		<!-- Tickets will be rendered here by JavaScript -->
	</div>

	<!-- Delete Dialog -->
	<div id="deleteDialog" class="fixed inset-0 bg-black/20 flex items-center justify-center p-4 z-50 hidden">
		<div class="bg-white rounded-xl shadow-2xl max-w-md w-full p-6 animate-[scale-in_0.2s_ease-out]">
			<h2 class="text-xl font-bold text-gray-900 mb-2">
				Delete Ticket?
			</h2>
			<p class="text-gray-600 mb-6" id="deleteDialogMessage">
				Are you sure you want to delete this ticket? This action cannot be undone.
			</p>
			<div class="flex gap-3 justify-end">
				<button id="cancelDeleteBtn" class="px-4 py-2 border border-gray-300 text-gray-700 rounded-lg hover:bg-gray-50 transition-colors">
					Cancel
				</button>
				<button id="confirmDeleteBtn" class="px-4 py-2 bg-red-600 text-white rounded-lg hover:bg-red-700 transition-colors">
					Delete
				</button>
			</div>
		</div>
	</div>
</main>

<script>
(function() {
	// ============================================
	// STATE MANAGEMENT
	// ============================================

	let currentFilter = 'all'; // 'all' or 'active'

	// ============================================
	// ROUTE DETECTION
	// ============================================

	const getInitialFilter = () => {
		const path = window.location.pathname;
		if (path.includes('/tickets/active')) {
			return 'active';
		}
		return 'all';
	};

	// ============================================
	// FILTER & RENDER FUNCTIONS
	// ============================================

	const getDisplayedTickets = (tickets) => {
		if (currentFilter === 'active') {
			return tickets.filter(
				(ticket) => ticket.status === 'open' || ticket.status === 'in_progress'
			);
		}
		return tickets;
	};

	const updateActiveTab = () => {
		const allTicketsTab = document.getElementById('allTicketsTab');
		const activeTicketsTab = document.getElementById('activeTicketsTab');

		if (currentFilter === 'active') {
			allTicketsTab.className = 'px-4 py-2 rounded-lg transition-colors bg-gray-200 text-gray-700 hover:bg-gray-300';
			activeTicketsTab.className = 'px-4 py-2 rounded-lg transition-colors bg-primary text-white';
		} else {
			allTicketsTab.className = 'px-4 py-2 rounded-lg transition-colors bg-primary text-white';
			activeTicketsTab.className = 'px-4 py-2 rounded-lg transition-colors bg-gray-200 text-gray-700 hover:bg-gray-300';
		}
	};

	const renderTickets = () => {
		const tickets = loadTickets();
		const displayedTickets = getDisplayedTickets(tickets);
		const container = document.getElementById('ticketsContainer');
		const pageTitle = document.getElementById('pageTitle');

		// Update page title
		pageTitle.textContent = currentFilter === 'active' ? 'Active Tickets' : 'All Tickets';

		// Update active tab styling
		updateActiveTab();

		// Show empty state if no tickets
		if (displayedTickets.length === 0) {
	container.innerHTML = `
		<p class="text-center text-muted-foreground py-8">
			${currentFilter === 'active' ? 'No active tickets.' : 'No tickets yet.'}
			<a class="hover:underline rounded-md text-primary" href="${url('dashboard')}">
				Create your first ticket here
			</a>
		</p>
	`;
	return;
}

		// Render tickets using shared utility function
		container.innerHTML = displayedTickets
			.map(ticket => renderTicketCard(ticket, true))
			.join('');
	};

	// ============================================
	// EVENT HANDLERS
	// ============================================

	const handleFilterChange = (filter) => {
		currentFilter = filter;

		// Update URL without reloading the page
		const newUrl = filter === 'active'
			? url('tickets/active')
			: url('/tickets');
		window.history.pushState({filter}, '', newUrl);

		renderTickets();
	};

	// ============================================
	// INITIALIZATION
	// ============================================

	document.addEventListener('DOMContentLoaded', () => {
		// Set initial filter based on URL
		currentFilter = getInitialFilter();

		// Initialize delete dialog with refresh callback
		const deleteDialog = createDeleteDialog();
		deleteDialog.initialize(() => {
			deleteTicket(ticketToDelete.id);
			renderTickets();
		});

		// Add click event listeners to filter tabs
		document.getElementById('allTicketsTab').addEventListener('click', () => {
			handleFilterChange('all');
		});

		document.getElementById('activeTicketsTab').addEventListener('click', () => {
			handleFilterChange('active');
		});

		// Handle browser back/forward buttons
		window.addEventListener('popstate', (event) => {
			currentFilter = event.state?.filter || getInitialFilter();
			renderTickets();
		});

		// Initial render
		renderTickets();
	});
})();
</script>

{% endblock %}
