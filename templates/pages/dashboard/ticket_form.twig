{# ticket_form.twig #}
{% extends "layout/base.twig" %}

{% block content %}
	{% include "components/dashboard/header.twig" %}
	<main class="min-h-screen bg-gray-50 py-8 pt-28">
		<div class="max-w-2xl mx-auto px-4">
			<div class="bg-white p-8 shadow-md rounded-lg">
				<h1 class="text-2xl font-bold mb-6" id="formTitle">
					Create New Ticket
				</h1>

				<form
					class="space-y-6" id="ticketForm">
					<!-- Title -->
					<div class="space-y-2">
						<label for="title" class="block font-medium">
							Title
							<span class="text-red-600">*</span>
						</label>
						<input id="title" type="text" name="title" class="w-full border border-gray-300 rounded-md p-2 focus:outline-none focus:ring-2 focus:ring-blue-500" placeholder="Enter ticket title" aria-invalid="false"/>
						<p id="title-error" class="text-sm text-red-600 flex items-center gap-1 hidden" role="alert">
							<svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewbox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="h-4 w-4">
								<circle cx="12" cy="12" r="10"/>
								<line x1="12" x2="12" y1="8" y2="12"/>
								<line x1="12" x2="12.01" y1="16" y2="16"/>
							</svg>
							<span></span>
						</p>
					</div>

					<!-- Description -->
					<div class="space-y-2">
						<label for="description" class="block font-medium">
							Description
						</label>
						<textarea id="description" name="description" rows="4" class="w-full border border-gray-300 rounded-md p-2 focus:outline-none focus:ring-2 focus:ring-blue-500" placeholder="Enter ticket description (optional)" aria-invalid="false"></textarea>
						<p id="description-error" class="text-sm text-red-600 flex items-center gap-1 hidden" role="alert">
							<svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewbox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="h-4 w-4">
								<circle cx="12" cy="12" r="10"/>
								<line x1="12" x2="12" y1="8" y2="12"/>
								<line x1="12" x2="12.01" y1="16" y2="16"/>
							</svg>
							<span></span>
						</p>
					</div>

					<!-- Status -->
					<div class="space-y-2">
						<label for="status" class="block font-medium">
							Status
							<span class="text-red-600">*</span>
						</label>
						<select id="status" name="status" class="w-full border border-gray-300 rounded-md p-2 focus:outline-none focus:ring-2 focus:ring-blue-500" aria-invalid="false">
							<option value="">Select status</option>
							<option value="open">Open</option>
							<option value="in_progress">In Progress</option>
							<option value="closed">Closed</option>
						</select>
						<p id="status-error" class="text-sm text-red-600 flex items-center gap-1 hidden" role="alert">
							<svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewbox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="h-4 w-4">
								<circle cx="12" cy="12" r="10"/>
								<line x1="12" x2="12" y1="8" y2="12"/>
								<line x1="12" x2="12.01" y1="16" y2="16"/>
							</svg>
							<span></span>
						</p>
					</div>

					<!-- Priority (Optional) -->
					<div class="space-y-2">
						<label for="priority" class="block font-medium">
							Priority (Optional)
						</label>
						<select id="priority" name="priority" class="w-full border border-gray-300 rounded-md p-2 focus:outline-none focus:ring-2 focus:ring-blue-500">
							<option value="">Select priority</option>
							<option value="low">Low</option>
							<option value="medium">Medium</option>
							<option value="high">High</option>
						</select>
					</div>

					<!-- Buttons -->
					<div class="flex gap-3 justify-end pt-4">
						<button type="button" id="cancelBtn" class="px-4 py-2 border cursor-pointer border-gray-300 rounded-md hover:bg-gray-50 transition-colors">
							Cancel
						</button>
						<button type="submit" id="submitBtn" data-loading-text="Loading..." class="px-6 py-2 bg-primary cursor-pointer text-white rounded-md hover:bg-hover transition-colors disabled:opacity-50 disabled:cursor-not-allowed">
							Create Ticket
						</button>
					</div>
				</form>
			</div>
		</div>
	</main>

	<script>
		(function () {
// ============================================
// STATE
// ============================================
const formData = {
title: '',
description: '',
status: '',
priority: ''
};

let isEditMode = false;
let ticketId = null;
let isLoading = false;

// ============================================
// VALIDATION FUNCTIONS
// ============================================
const validateTitle = (title) => {
if (!title.trim()) {
return {isValid: false, message: 'Title cannot be empty'};
}
if (title.trim().length < 3) {
return {isValid: false, message: 'Title must be at least 3 characters long'};
}
return {isValid: true, message: ''};
};

const validateDesc = (desc) => { // Description is optional
if (desc && desc.trim().length < 10) {
return {isValid: false, message: 'Description must be at least 10 characters long'};
}
return {isValid: true, message: ''};
};

const validateStatus = (status) => {
const validStatuses = ['open', 'in_progress', 'closed'];

if (!status.trim()) {
return {isValid: false, message: 'Status is required'};
}

if (! validStatuses.includes(status)) {
return {isValid: false, message: 'Status must be open, in_progress, or closed'};
}

return {isValid: true, message: ''};
};

const validateForm = () => {
clearAllErrors('title', 'description', 'status');

const titleResult = validateTitle(formData.title);
const descResult = validateDesc(formData.description);
const statusResult = validateStatus(formData.status);

let isValid = true;

if (! titleResult.isValid) {
showError('title', titleResult.message);
isValid = false;
}

if (! descResult.isValid) {
showError('description', descResult.message);
isValid = false;
}

if (! statusResult.isValid) {
showError('status', statusResult.message);
isValid = false;
}

return isValid;
};

// ============================================
// FORM UTILITIES
// ============================================
const clearForm = () => { // Clear form data
formData.title = '';
formData.description = '';
formData.status = '';
formData.priority = '';

// Clear form inputs
document.getElementById('title').value = '';
document.getElementById('description').value = '';
document.getElementById('status').value = '';
document.getElementById('priority').value = '';

// Clear all errors
clearAllErrors('title', 'description', 'status');
};

// ============================================
// LOAD TICKET DATA FOR EDITING
// ============================================
const loadTicket = (id) => {
const ticket = getTicketById(id);

if (ticket) {
formData.title = ticket.title;
formData.description = ticket.description || '';
formData.status = ticket.status;
formData.priority = ticket.priority || '';

// Update form fields
document.getElementById('title').value = formData.title;
document.getElementById('description').value = formData.description;
document.getElementById('status').value = formData.status;
document.getElementById('priority').value = formData.priority;
} else {
showToast('Ticket not found', 'error');
window.location.href = '/tickets';
}
};

// ============================================
// DETECT EDIT MODE FROM URL
// ============================================
const detectEditMode = () => {
const path = window.location.pathname;
const editMatch = path.match(/\/tickets\/edit\/(.+)/);

if (editMatch) {
isEditMode = true;
ticketId = editMatch[1];

// Update UI for edit mode
document.getElementById('formTitle').textContent = 'Edit Ticket';
document.getElementById('submitBtn').textContent = 'Update Ticket';
document.getElementById('submitBtn').setAttribute('data-loading-text', 'Updating...');

// Load ticket data
loadTicket(ticketId);
}
};

// ============================================
// EVENT HANDLERS
// ============================================
const handleChange = (e) => {
const {name, value} = e.target;
formData[name] = value;

// Clear error when user starts typing
clearError(name);
};

const handleBlur = (e) => {
const {name, value} = e.target;

let result;
switch (name) {
case 'title': result = validateTitle(value);
break;
case 'description': result = validateDesc(value);
break;
case 'status': result = validateStatus(value);
break;
default:
return;
}

if (! result.isValid) {
showError(name, result.message);
}
};

const handleSubmit = async (e) => {
e.preventDefault();

if (! validateForm()) {
showToast('Please fix the errors in the form', 'error');
return;
}

setLoading(true, 'submitBtn', 'ticketForm');

try {
if (isEditMode && ticketId) { // UPDATE existing ticket
updateTicket(ticketId, {
title: formData.title,
description: formData.description,
status: formData.status,
priority: formData.priority
});
showToast('Ticket updated successfully!', 'success');

// Clear form after successful update
clearForm();
} else { // CREATE new ticket
const newTicket = {
id: 'ticket-' + Date.now(),
title: formData.title,
description: formData.description,
status: formData.status,
priority: formData.priority,
createdAt: new Date().toISOString()
};
addTicket(newTicket);
showToast('Ticket created successfully!', 'success');


// Clear form after successful creation
clearForm();
}

// Navigate back to tickets page after a short delay
setTimeout(() => {
window.location.href = url('dashboard');
}, 1000);
} catch (error) {
console.error(error);
showToast (`Failed to ${
isEditMode ? 'update' : 'create'
} ticket`, 'error');
setLoading(false, 'submitBtn', 'ticketForm');
} finally {
setLoading(false, 'submitBtn', 'ticketForm');

}
};

const handleCancel = () => {
window.location.href = '/dashboard';
};

// ============================================
// INITIALIZE
// ============================================
document.addEventListener('DOMContentLoaded', () => { // Detect if we're in edit mode
detectEditMode();

// Get form elements
const form = document.getElementById('ticketForm');
const titleInput = document.getElementById('title');
const descInput = document.getElementById('description');
const statusSelect = document.getElementById('status');
const prioritySelect = document.getElementById('priority');
const cancelBtn = document.getElementById('cancelBtn');

// Attach event listeners
titleInput.addEventListener('input', handleChange);
titleInput.addEventListener('blur', handleBlur);

descInput.addEventListener('input', handleChange);
descInput.addEventListener('blur', handleBlur);

statusSelect.addEventListener('change', handleChange);
statusSelect.addEventListener('blur', handleBlur);

prioritySelect.addEventListener('change', handleChange);

form.addEventListener('submit', handleSubmit);
cancelBtn.addEventListener('click', handleCancel);
});
})();
	</script>
{% endblock %}
